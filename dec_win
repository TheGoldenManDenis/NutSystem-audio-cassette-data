DRAW 1,1:CLS
REM ########## global variables ##########
REM File pointer for the PCM input.
signal%=OPENIN("/tmp/readdata")
REM The newest sample, and the sample that came before it.
sample%=128
oldsample%=128
REM Polarity. Set to FALSE for normal polarity, TRUE for inverted polarity.
invert%=FALSE
REM Checksum values.
REM The checksum of the data that has been read in.
chksum_a%=0
chksum_b%=0
REM The checksum from the header, for comparison.
chksum_a_%=1
chksum_b_%=1
REM Set to TRUE if the checksums don't match.
checksumfailed%=FALSE
REM Threshold, and average amplitudes for the binary values.
threshold%=100
av%=120
avb%=70
REM Constant used for deciding the threshold value.
threshold_div=3.4
REM TRUE if the start signal has been successfully read.
startok%=FALSE
REM The number of bytes read, increases every time FNreadbyte is called.
bytecount%=0
REM The filename/file description.
filename$=""
REM The length of the file, in bytes.
filelength%=0
REM Variable used to store the value that FNreadstartsignal returns.
REM If the start signal was read successfully, it will be 54.
start_signal_response%=0
REM ######################################

PRINT "Start"
PRINT "Waiting for signal"
PROCgetpolarity

start_signal_response%=FNreadstartsignal
IF start_signal_response%=54 THEN

 startok%=TRUE
 PROCreadchecksum
 filename$=FNreadfilename
 fout%=OPENOUT("miscfiles/recovered_file")
 filelength%=FNreadfilelength
 bytecount%=0

 COLOUR 7
 PRINT "Signal OK"
 COLOUR 6
 PRINT "File description: ";filename$
 PRINT "File length: ";filelength%;" bytes"
 COLOUR 7

 REPEAT
  PROCprogressreport
  databyte%=FNreadbyte 
  PROCchecksumprocess(databyte%)
  BPUT#fout%,databyte%
 UNTIL bytecount%>=filelength%

 PRINT "                            ":VDU11
 PROCchecksumresult
 CLOSE#fout% 

ELSE

 PRINT "Failure when reading start signal"
 PRINT "Start signal response: "; start_signal_response%
 PRINT "Powerlimit" threshold%
 PRINT "Nutpowers" av% avb%
 PROCpressreturntoexit

ENDIF

CLOSE#signal%

IF checksumfailed% THEN PROCpressreturntoexit

PRINT "End                 "

END

DEFFNreadfilename
 LOCAL name$,namelength%,i%
 
 namelength%=FNreadbyte
 
 FOR i%=1 TO namelength%
  name$+=CHR$(FNreadbyte)
 NEXT
 
=name$

DEFFNreadfilelength
 LOCAL fl%
  
 fl%=FNreadbyte*256*256
 fl%+=FNreadbyte*256
 fl%+=FNreadbyte
 
=fl%

DEFFNreadwave
 LOCAL sxc%,hi%,lo%
 
 REM Look for high point##########################
 sxc%=0: hi%=0
 REPEAT
  PROCReadSample 
  IF sample%>oldsample% THEN
   IF sxc%>0 THEN sxc%-=1
  ELSE
   sxc%+=1
  ENDIF
  IF sample%>hi% THEN hi%=sample%
 UNTIL sxc%=3
 REM #############################################

 REM Look for low point ##########################
 sxc%=0: lo%=255
 REPEAT
  PROCReadSample
  IF sample%<oldsample% THEN
   IF sxc%>0 THEN sxc%-=1
  ELSE
   sxc%+=1
  ENDIF
  IF sample%<lo% THEN lo%=sample%
 UNTIL sxc%=3
 REM #############################################

 IF startok% THEN
  threshold%=av%-avb%: threshold%=threshold%/threshold_div: threshold%+=avb%
 ENDIF

=hi%-lo%

DEFFNreadstartsignal
 LOCAL i%,null%

 FOR i%=1 TO 2611
  av%=FNreadwave: avb%=av%/3
  threshold%=av%-avb%: threshold%=threshold%/threshold_div: threshold%+=avb%
 NEXT

 REPEAT: UNTIL FNdeterminetype(FNreadwave)=1
 
 FOR i%=1 TO 6
  avb%+=FNreadwave: avb%=avb%DIV2
 NEXT

 threshold%=av%-avb%: threshold%=threshold%/threshold_div: threshold%+=avb%

=FNreadbyte

DEFFNdeterminetype(input%)
 LOCAL result%

 IF input%>=threshold% THEN

  result%=0
  av%+=input%: av%=av% DIV 2

 ELSE

  result%=1
  avb%+=input%: avb%=avb% DIV 2

 ENDIF

=result%

DEFPROCReadSample
 oldsample%=sample%
 sample%=BGET#signal%
 IF invert% THEN sample%=255-sample%
ENDPROC

DEFFNreadbyte
 LOCAL i%,binval%,result%
 binval%=128:result%=0
 bytecount%+=1

 FOR i%=1 TO 8
  result%+=binval%*FNdeterminetype(FNreadwave)
  binval%=binval%DIV2
 NEXT

=result%

DEFPROCgetpolarity
 LOCAL i%,hi%,lo%,null%
 hi%=128:lo%=128

 FOR i%=1 TO 4: 
  null%=BGET#signal%
 NEXT
 FOR i%=1 TO 77661
  PROCReadSample
  IF sample%>hi% THEN hi%=sample%
  IF sample%<lo% THEN lo%=sample%
 NEXT
 hi%+=8: lo%-=8
 REPEAT
  PROCReadSample
  IF sample%>hi% THEN invert%=FALSE
  IF sample%<lo% THEN invert%=TRUE
 UNTIL sample%>hi% OR sample%<lo%

 COLOR 15: PRINT "Polarity: ";: IF invert% PRINT ;"inverted" ELSE PRINT ;"normal"
 COLOR 7
ENDPROC

DEFPROCreadchecksum
 chksum_a_%=FNreadbyte
 chksum_b_%=FNreadbyte
ENDPROC

DEFPROCchecksumprocess(input%)
 chksum_a%+=input%
 chksum_b%+=(input%+chksum_a%)
 IF chksum_a%>100000 THEN chksum_a%-=90000
 IF chksum_b%>100000 THEN chksum_b%-=90000
ENDPROC

DEFPROCchecksumresult
 REPEAT
  IF chksum_a%>255 THEN chksum_a%-=116
 UNTIL chksum_a%<256

 REPEAT
  IF chksum_b%>255 THEN chksum_b%-=116
 UNTIL chksum_b%<256

 IF chksum_a%<>chksum_a_% OR chksum_b%<>chksum_b_% THEN
  COLOUR 1: PRINT "Checksum fail": COLOUR 7: checksumfailed%=TRUE
 ELSE
  COLOUR 2: PRINT "Checksum OK": COLOUR 7
 ENDIF
ENDPROC

DEFPROCprogressreport
 IF bytecount%MOD2560=0 THEN
  PRINT bytecount%
  VDU11
 ENDIF
ENDPROC

DEFPROCpressreturntoexit
 INPUT "Press return to exit" null%
ENDPROC
